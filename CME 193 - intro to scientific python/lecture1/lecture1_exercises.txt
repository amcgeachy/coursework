###exercise 1.1
#open python interpreter, what does the command do

In [1]: 3+1
Out[1]: 4
#add 

In [2]: 3*3
Out[2]: 9
#multiply

In [3]: 2 ** 3
Out[3]: 8
#exponent

In [4]: "Hello, world!"
Out[4]: 'Hello, world!'
#returns the string
In [5]:

###exercise 1.3
#more interpreter

In [5]: 'py' + 'thon'
Out[5]: 'python'
#combines the strings

In [6]: 'py' * 3 + 'thon'
Out[6]: 'pypypython'
#repeats the first string 3 times, then adds the next string

In [7]: 'py' - 'py'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-7-4fb77fdd0ed6> in <module>()
----> 1 'py' - 'py'
#but can't math with strings

TypeError: unsupported operand type(s) for -: 'str' and 'str'

In [8]: '3'+3
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-8-41594ee27276> in <module>()
----> 1 '3'+3
#'3' is a string. no math.

TypeError: Can't convert 'int' object to str implicitly

In [9]: 3*'3'
Out[9]: '333'
#but it can be multiplied as a string

In [10]: a
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-10-60b725f10c9c> in <module>()
----> 1 a

NameError: name 'a' is not defined
#error because its not a standard variable and we didnt define it

In [11]: a=3
#defining the variable

In [12]: a
Out[12]: 3
#getting the variable value returned


####Exercise 1.4 Booleans

In [13]: 1 == 1
Out[13]: True
#== evalutes statements to see if true

In [14]: 1 == TRUE
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-14-41336cfd9213> in <module>()
----> 1 1 == TRUE

NameError: name 'TRUE' is not defined
#right, this isn't R

In [15]: 1 == True
Out[15]: True
#1 is the numeric true

In [16]: 0 == True
Out[16]: False
#0 is the numeric false

In [17]: 0 == False
Out[17]: True
#0 is the numeric false

In [18]: 3 == 1 * 3
Out[18]: True
#it can handle math

In [19]: (3 == 1) * 3
Out[19]: 0
#the statement results in false which 3 * 0 is 0 

In [20]: (3 == 3) * 4 + 3 == 1
Out[20]: False
#evaluates the math leading up the last statement

In [21]: 3**5 >= 4**4
Out[21]: False
#it can handle more complex things like >= (243 is in fact =< 256)

###exercise 1.5
In [24]: 5/3
Out[24]: 1.6666666666666667
#if this was python 2, i would return only the 1

In [25]: 5%3
Out[25]: 2
#returning the remainder after dividing by 3

In [26]: 5.0/3
Out[26]: 1.6666666666666667
#here if this was python 2 it would be different from the above by actually doing decimals

In [27]: 5/3.0
Out[27]: 1.6666666666666667
#same 

In [28]: 5.2 % 3
Out[28]: 2.2
#remainder now with decimals! because it has decimals.

In [29]: 2001**200
Out[29]: 1775896810483121914350934797871501063452843428843794422323202530887281536545210629921129898113201749875234297340507804201761453596034016264189501186924066128377025843892373608427790859511135990682732202975330824797118808624727351608183194154557208730494440110429635650057431833674286462463508755276302896154336475782768613964332764108132533925570342220340698973761380541294970139762186212823359128790706292900765512137078550033912252338262922477518858757114840012576514724742388124595061301502222934806074032688691170880996881967426442947828261057852871032366879179996122216385870273020506079240103910728766397733398071775041745854959302025036249707279600400001
#so many digits returned. i honestly cant tell if its enough or if we hit integer overflow; the internet says python can't overflow so probably ok?

###exercise 1.6 floats

In [31]: 2000.3 ** 200
---------------------------------------------------------------------------
OverflowError                             Traceback (most recent call last)
<ipython-input-31-11e960b1ae3d> in <module>()
----> 1 2000.3 ** 200

OverflowError: (34, 'Result too large')
#aha but you can overflow floats

In [32]: 1.0 + 1.0 - 1.0
Out[32]: 1.0
#give it floats, returned floats

In [33]: 1.0 + 1.0e20 -1.0e20
Out[33]: 0.0
#less sure what's happening here. is it lost in a rounding error?

In [34]:

###exercise 1.8 type casting
In [40]: float(123)
Out[40]: 123.0
#make it a float! now with more decimal!

In [41]: float('123')
Out[41]: 123.0
#float that string

In [42]: float('123.23')
Out[42]: 123.23
#so floaty.

In [43]: int(123.23)
Out[43]: 123
#turn it into an int (no decimal)

In [44]: int('123.23')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-44-5e250fe2a145> in <module>()
----> 1 int('123.23')

ValueError: invalid literal for int() with base 10: '123.23'
#apparently it can't handle the string format though

In [45]: str(12)
Out[45]: '12'
#make it into a string

In [46]: str(12.2)
Out[46]: '12.2'
#strings don't care about periods

In [47]: bool('a')
Out[47]: True
#evaluates if its an empty string, its not, so true

In [48]: bool(0)
Out[48]: False
#evaluates if its a non zero, which its not, so false

In [49]: bool(0.1)
Out[49]: True
#this is non zero! (so is 0.000001 and 3, as I tested)

In [50]:
